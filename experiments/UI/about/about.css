
/* set up common values. helps consistency and creates one place where designers can edit them. */
:root {
    --primary-color: #D9D9D9;
    --secondary-color: #1b1b1b;
    --tertiary-color: #3dec1c;
  
    --header-size: 2em;
    --text-size: 1em;
  }
  
  /* The entire menu can just be laid atop the canvas, and be made reactive with basic CSS. */
  section.about {
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;

      /* Lower bound for resizing */
      overflow: hidden;
      min-width: 512px;
      min-height: 512px;
  
      /* Grid layout which will resize to any screen size 
         Browser developer tool can draw this on the screen and interactively update while you edit! */
      display: grid;
      grid-template-columns: 1fr;
      grid-template-rows: 50% 50%;
      grid-template-areas:
        "header"
        "navigation";
  
      /* General styling */
      color: var(--primary-color);
      font-size: var(--text-size);
      background-color: var(--secondary-color);
      font-family: Oswald;
      align-content: top;
      justify-content: center;
    }
  
    /* header for the credits page. 
      Basically just links the html header tag with the above named grid template area! */
    section.about > header {
      grid-area: header;
    }
    
    section.about h1 {
      text-align: center;
      font-size: var(--header-size);
    }
  
    /* Navigation bar for the about page*/
    section.about > nav {
      grid-area: navigation;
    }
  
    /* Defaults fine for now... */
    /* section.about h2 {} */
  
    /* A definition list is used for the credit entries. Not sure if this is semantically proper. */
    section.about > nav {
      grid-area: navigation;
      
      /** Here is a 2-column grid layout that will add rows as links are added; **/
      display: grid;
      grid-template-columns: 1fr 1fr;
      grid-auto-rows: 1fr;
      column-gap: var(--header-size);
      row-gap: var(--header-size);
      padding: var(--header-size);
      width: calc(100% - 2 * var(--header-size));
      height: calc(100% - 2 * var(--header-size));
    }
  
    section.about button {
      font-size: var(--header-size);
      background-color: var(--secondary-color);
      border-radius: var(--text-size);

      /** Need these redundant rules because button have a higher specificity default styling... **/
      color: var(--primary-color);
      font-family: Oswald;
    }

    section.about button:hover {
      color: var(--tertiary-color);
    }